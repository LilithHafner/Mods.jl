var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Mods","category":"page"},{"location":"api/","page":"API","title":"API","text":"is_invertible\nvalue\nMod\nCRT\nmodulus\nGaussMod\nBase.inv","category":"page"},{"location":"api/#Mods.is_invertible","page":"API","title":"Mods.is_invertible","text":"is_invertible(x::Mod) determines if x is invertible.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mods.value","page":"API","title":"Mods.value","text":"value(a::Mod) returns the value of this Mod number.\n\njulia> a = Mod{13}(11);\n\njulia> value(a)\n11\n\n\n\n\n\n","category":"function"},{"location":"api/#Mods.Mod","page":"API","title":"Mods.Mod","text":"Mod{m}(v) creates a modular number in mod m with value mod(v,m).\n\n\n\n\n\n","category":"type"},{"location":"api/#Mods.CRT","page":"API","title":"Mods.CRT","text":"`CRT([T=BigInt, ]m1, m2,...)`\n\nChinese Remainder Theorem.\n\njulia> CRT(Int, Mod{11}(4), Mod{14}(814))\n92\n\njulia> 92%11\n4\n\njulia> 92%14\n8\n\njulia> CRT(Mod{9223372036854775783}(9223372036854775782), Mod{9223372036854775643}(9223372036854775642))\n85070591730234614113402964855534653468\n\nnote: Note\nCRT uses BigInt by default to prevent potential integer overflow. If you are confident that numbers does not overflow in your application, please specify an optional type parameter as the first argument.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mods.modulus","page":"API","title":"Mods.modulus","text":"modulus(a::Mod) returns the modulus of this Mod number.\n\njulia> a = Mod{13}(11);\n\njulia> modulus(a)\n13\n\n\n\n\n\n","category":"function"},{"location":"api/#Mods.GaussMod","page":"API","title":"Mods.GaussMod","text":"GaussMod{N,T} is an alias of Mod{N,Complex{T}}. It is for computing Gaussian Modulus.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.inv","page":"API","title":"Base.inv","text":"inv(x::Mod) gives the multiplicative inverse of x.\n\n\n\n\n\n","category":"function"},{"location":"#Mods.jl","page":"Home","title":"Mods.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modular arithmetic for Julia.","category":"page"}]
}
